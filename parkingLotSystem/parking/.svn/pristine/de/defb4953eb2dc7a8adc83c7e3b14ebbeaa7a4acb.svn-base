package com.parking.action;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.struts2.ServletActionContext;

import com.opensymphony.xwork2.ActionSupport;
import com.parking.entity.ActionResult;
import com.parking.entity.Users;
import com.parking.service.UsersService;

@SuppressWarnings("serial")
public class UsersAction extends ActionSupport {
	private UsersService usersService;// 用户Service
	private Users user;
	private String code;// 验证码
	private ActionResult result;
	private String confirmPwd;// 确认密码
	private String newPwd;// 新密码
	private List<Users> userList;
	private Integer user_id;
	private String user_name;

	// 分页
	private Integer totalPage;
	private Integer currentPage;

	HttpServletRequest request = ServletActionContext.getRequest();
	HttpSession session = ServletActionContext.getRequest().getSession();

	/**
	 * 用户登录
	 * 
	 * @return
	 */
	public String login() {
		result = new ActionResult();
		String randCode = String.valueOf(session.getAttribute("rand"));
		if (!randCode.equals(code)) {
			result.setCode(0);
			result.setMsg("验证码错误");
			return "success";
		} else {
			Users userFind = usersService.login(user.getName(),
					user.getPassword());
			if (userFind == null) {
				result.setCode(1);
				result.setMsg("用户名不存在或密码错误");
				return "success";
			} else {
				usersService.updateIntegration(userFind.getId(), 1);
				Users loginedUser = usersService.getUserById(userFind.getId());
				session.setAttribute("userFind", null);
				session.setAttribute("user", loginedUser);
				return "success";
			}
		}

	}

	/**
	 * 处理新用户昵称
	 * 
	 * @return
	 */
	/*
	 * public String validateUserName() { int findUserNameRes =
	 * usersService.existUserName(user.getName()); result = new ActionResult();
	 * if (findUserNameRes > 0) { result.setCode(0); result.setMsg("该用户名已存在");
	 * return "success"; } else { result.setCode(1); result.setMsg("该用户名可以使用");
	 * return "success"; } }
	 */

	/**
	 * 用户注册
	 * 
	 * @return
	 */
	public String register() {
		String regResult = "success";
		Long findUserNameRes = usersService.existUserName(user.getName());
		result = new ActionResult();
		if (findUserNameRes > 0l) {
			result.setCode(0);
			result.setMsg("该用户名已存在");
			return "success";
		} else {
			try {
				int res = usersService.insertUser(user);
				if (res > 0) {
					result.setCode(1);
					result.setMsg("恭喜您注册成功");
					regResult = "success";
				} else {
					regResult = "error";
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			return regResult;
		}
	}

	/**
	 * 修改用户密码
	 * 
	 * @return
	 * @throws Exception
	 */
	public String modifyUserPwd() throws Exception {
		result = new ActionResult();
		Users userSession = (Users) session.getAttribute("user");
		int modifyRes = usersService.modifyUserPwd(userSession.getId(), newPwd);
		if (modifyRes > 0) {
			result.setCode(0);
			result.setMsg("修改成功");
			return "success";
		} else {
			result.setCode(1);
			result.setMsg("修改失败");
			return "success";
		}
	}

	/**
	 * 注册成为会员
	 * 
	 * @return
	 * @throws Exception
	 */
	public String beMember() throws Exception {
		result = new ActionResult();
		Users userSession = (Users) session.getAttribute("user");
		int resBeMember = usersService.beMember(userSession.getId());
		if (resBeMember > 0) {
			Users memberUser = usersService.getUserById(userSession.getId());
			session.removeAttribute("user");
			session.setAttribute("user", memberUser);
			result.setCode(0);
			result.setMsg("恭喜您成功注册了会员");
			return "success";
		} else {
			result.setCode(1);
			result.setMsg("注册失败，请稍后重新尝试");
			return "success";
		}
	}

	/**
	 * 注销账户Action
	 * 
	 * @return
	 * @throws Exception
	 */
	public String nullifyUser() throws Exception {
		Users userSession = (Users) session.getAttribute("user");
		int resNullify = usersService.nullifyUser(userSession);
		if (resNullify > 0) {
			return "success";
		} else {
			return "error";
		}
	}

	/**
	 * 抽奖
	 * 
	 * @return
	 */
	public String luckyMan() {
		Users userSession = (Users) session.getAttribute("user");
		int luckyRes = usersService.updateLucky(userSession.getId());
		if (luckyRes > 0) {
			Users userLuckyed = usersService.getUserById(userSession.getId());
			session.setAttribute("user", userLuckyed);
			return "success";
		} else {
			return "error";
		}
	}

	/**
	 * 退出系统
	 * 
	 * @return
	 */
	public String logOut() {
		session.setAttribute("user", null);
		return "success";
	}

	/**
	 * 查询所有用户
	 * 
	 * @return
	 */
	public String getUsers() {
		int pageSize = 16;
		Long count = usersService.getUserCount();
		if (count <= 0) {
			totalPage = 1;
		} else {
			totalPage = (int) ((count % pageSize == 0) ? (count / pageSize)
					: (count / pageSize + 1));
		}
		if (currentPage == null) {
			this.setCurrentPage(1);
		}
		int begin = (currentPage - 1) * pageSize;
		userList = usersService.getUsers(begin, pageSize);
		request.setAttribute("currentPage", currentPage);
		request.setAttribute("totalPage", totalPage);
		return "success";
	}

	/**
	 * 封号
	 * 
	 * @return
	 * @throws Exception
	 */
	public String killUser() throws Exception {
		int killRes = usersService.killorLiveUser(user_id, 2);
		if (killRes > 0) {
			return "success";
		} else {
			return "error";
		}
	}

	/**
	 * 解封
	 * 
	 * @return
	 * @throws Exception
	 */
	public String liveUser() throws Exception {
		int liveRes = usersService.killorLiveUser(user_id, 0);
		if (liveRes > 0) {
			return "success";
		} else {
			return "error";
		}
	}

	/**
	 * 根据用户名查询用户
	 * 
	 * @return
	 */
	public String getUserByName() {
		result = new ActionResult();
		user = usersService.getUserByName(user_name);
		if (user == null) {
			result.setCode(0);
			result.setMsg("该用户不存在");
			return "success";
		} else {
			session.setAttribute("userFind", user);
			session.setAttribute("userName", user_name);
			result.setCode(1);
			result.setMsg("查询成功");
			return "success";
		}
	}
	/**
	 * 用户信息页封号/解封后跳转
	 * @return
	 */
	public String getUserByNameAtUserInfo() {
		String userFindName = (String) session.getAttribute("userName");
		user = usersService.getUserByName(userFindName);
		session.setAttribute("userFind", user);
		return "success";
	}

	public UsersService getUsersService() {
		return usersService;
	}

	public void setUsersService(UsersService usersService) {
		this.usersService = usersService;
	}

	public Users getUser() {
		return user;
	}

	public void setUser(Users user) {
		this.user = user;
	}

	public ActionResult getResult() {
		return result;
	}

	public void setResult(ActionResult result) {
		this.result = result;
	}

	public String getCode() {
		return code;
	}

	public void setCode(String code) {
		this.code = code;
	}

	public String getConfirmPwd() {
		return confirmPwd;
	}

	public void setConfirmPwd(String confirmPwd) {
		this.confirmPwd = confirmPwd;
	}

	public String getNewPwd() {
		return newPwd;
	}

	public void setNewPwd(String newPwd) {
		this.newPwd = newPwd;
	}

	public List<Users> getUserList() {
		return userList;
	}

	public void setUserList(List<Users> userList) {
		this.userList = userList;
	}

	public Integer getTotalPage() {
		return totalPage;
	}

	public void setTotalPage(Integer totalPage) {
		this.totalPage = totalPage;
	}

	public Integer getCurrentPage() {
		return currentPage;
	}

	public void setCurrentPage(Integer currentPage) {
		this.currentPage = currentPage;
	}

	public Integer getUser_id() {
		return user_id;
	}

	public void setUser_id(Integer user_id) {
		this.user_id = user_id;
	}

	public String getUser_name() {
		return user_name;
	}

	public void setUser_name(String user_name) {
		this.user_name = user_name;
	}
}
