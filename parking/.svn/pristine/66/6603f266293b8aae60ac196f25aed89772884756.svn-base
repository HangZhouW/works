package com.parking.service.impl;

import java.util.List;

import com.parking.dao.UsersDao;
import com.parking.entity.Users;
import com.parking.service.UsersService;

public class UsersServiceImpl implements UsersService {
	// userDao
	private UsersDao dao;

	public UsersDao getDao() {
		return dao;
	}

	public void setDao(UsersDao dao) {
		this.dao = dao;
	}

	/**
	 * 登录方法
	 */
	@Override
	public Users login(String loginName, String loginPwd) {
		List<Users> userFind = dao.login(loginName, loginPwd);
		if (userFind.size() > 0) {
			return userFind.get(0);
		}
		return null;
	}

	/**
	 * 新用户注册
	 * 
	 * @throws Exception
	 */
	@Override
	public int insertUser(Users user) throws Exception {
		int res = 0;
		try {
			dao.insertUser(user);
			res = 1;
		} catch (Exception e) {
			e.printStackTrace();
			throw new Exception();
		}
		return res;
	}

	/**
	 * 检查已存在的用户昵称
	 */
	@Override
	public Long existUserName(String userName) {
		return dao.existUserName(userName);
	}

	/**
	 * 更新用户积分
	 */
	@Override
	public void updateIntegration(int user_id, int integration) {
		dao.updateIntegration(user_id, integration);
	}

	/**
	 * 修改用户密码
	 * 
	 * @throws Exception
	 */
	@Override
	public int modifyUserPwd(int user_id, String newPwd) throws Exception {
		int res = 0;
		try {
			dao.modifyUserPwd(user_id, newPwd);
			res = 1;
		} catch (Exception e) {
			throw new Exception();
		}
		return res;
	}

	/**
	 * 注册会员
	 */
	@Override
	public int beMember(int user_id) throws Exception {
		int res = 0;
		try {
			dao.beMember(user_id);
			res = 1;
		} catch (Exception e) {
			throw new Exception();
		}
		return res;
	}

	/**
	 * 注销账户
	 */
	@Override
	public int nullifyUser(Users user) throws Exception {
		int res = 0;
		try {
			dao.nullifyUser(user);
			res = 1;
		} catch (Exception e) {
			throw new Exception();
		}
		return res;

	}

	/**
	 * 根据id得到User
	 */
	@Override
	public Users getUserById(Integer user_id) {
		return dao.getUserById(user_id);
	}

	/* 抽奖 */
	@Override
	public int updateLucky(Integer user_id) {
		return dao.luckyMan(user_id);
	}

	/* 查询所有用户 */
	@Override
	public List<Users> getUsers(int begin, int pageSize) {
		return dao.getUsers(begin, pageSize);
	}

	@Override
	public Long getUserCount() {
		return dao.getUserCount();
	}

	@Override
	public int killorLiveUser(Integer user_id, Integer status) throws Exception {
		int res = 0;
		try {
			dao.killorLiveUser(user_id, status);
			res = 1;
		} catch (Exception e) {
			throw new Exception();
		}
		return res;
	}

	/* 根据用户名查询用户信息 */
	@Override
	public Users getUserByName(String user_name) {
		List<Users> userList = dao.getUserByName(user_name);
		if (userList != null && userList.size() > 0) {
			return userList.get(0);
		} else {
			return null;
		}
	}

}
