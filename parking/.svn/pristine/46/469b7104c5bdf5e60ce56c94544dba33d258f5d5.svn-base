package com.parking.dao.impl;

import java.sql.SQLException;
import java.util.List;

import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.springframework.orm.hibernate3.HibernateCallback;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;

import com.parking.dao.UsersDao;
import com.parking.entity.Users;

public class UsersDaoImpl extends HibernateDaoSupport implements UsersDao {
	/**
	 * 登录方法
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Override
	public List<Users> login(final String loginName, final String loginPwd) {
		return getHibernateTemplate().executeFind(new HibernateCallback() {
			@Override
			public Object doInHibernate(Session session)
					throws HibernateException, SQLException {
				return session
						.createQuery(
								"from Users u where u.name=:loginName and u.password=:loginPwd and u.status!=2")
						.setString("loginName", loginName)
						.setString("loginPwd", loginPwd).list();
			}
		});
	}

	// 新用户注册
	@Override
	public void insertUser(Users user) {
		getHibernateTemplate().save(user);
	}

	/**
	 * 判断已注册的用户昵称
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Override
	public Long existUserName(final String userName) {
		return getHibernateTemplate().execute(new HibernateCallback() {
			@Override
			public Object doInHibernate(Session session)
					throws HibernateException, SQLException {
				Long result = (Long) session
						.createQuery(
								"select count(*) from Users u where u.name=:userName")
						.setString("userName", userName).uniqueResult();
				return result;
			}
		});
	}

	/**
	 * 更新用户积分
	 */
	@Override
	public void updateIntegration(int user_id,int integration) {
		String hql="update Users u set u.integration=u.integration+? where u.id=?";
		Object[] args={integration,user_id};
		getHibernateTemplate().bulkUpdate(hql, args);
	}
	/**
	 * 修改密码
	 */
	@Override
	public void modifyUserPwd(int user_id, String newPwd) {
		String hql="update Users u set u.password=? where u.id=?";
		Object[] args={newPwd,user_id};
		getHibernateTemplate().bulkUpdate(hql, args);
	}
	/**
	 * 注册成为会员
	 */
	@Override
	public void beMember(int user_id) {
		String hql="update Users u set u.status=3 where u.id=?";
		getHibernateTemplate().bulkUpdate(hql, user_id);
	}

	/**
	 * 注销账户
	 */
	@Override
	public void nullifyUser(Users user) {
		getHibernateTemplate().delete(user);
	}
	/**
	 * 根据user_id得到User
	 */
	@Override
	public Users getUserById(Integer user_id) {
		return getHibernateTemplate().get(Users.class, user_id);
	}
	/*抽奖*/
	@Override
	public int luckyMan(Integer user_id) {
		String hql="update Users u set u.integration=u.integration-5 where u.id=?";
		return getHibernateTemplate().bulkUpdate(hql, user_id);
	}
	
	/*用户列表*/
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Override
	public List<Users> getUsers(final int begin, final int pageSize) {
		return getHibernateTemplate().execute(new HibernateCallback() {
			@Override
			public Object doInHibernate(Session session)
					throws HibernateException, SQLException {
				String hql = "from Users u where u.status!=1";
				Query query = session.createQuery(hql).setFirstResult(begin)
						.setMaxResults(pageSize);
				return query.list();
			}
		});
	}
	/*的到用户数量*/
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Override
	public Long getUserCount() {
		return getHibernateTemplate().execute(new HibernateCallback() {
			@Override
			public Object doInHibernate(Session session)
					throws HibernateException, SQLException {
				Long lostCount=(Long) session.createQuery("select count(*) from Users u where u.status!=1").uniqueResult();
				return lostCount;
			}
		});
	}

	@Override
	public int killorLiveUser(Integer user_id,Integer status) {
		String hql="update Users u set u.status=? where u.id=?";
		Object[] args={status,user_id};
		return getHibernateTemplate().bulkUpdate(hql, args);
	}
	/*根据用户名查询用户信息*/
	@SuppressWarnings("unchecked")
	@Override
	public List<Users> getUserByName(String user_name) {
		String hql="from Users u where u.name=?";
		return getHibernateTemplate().find(hql, user_name);
	}


}
